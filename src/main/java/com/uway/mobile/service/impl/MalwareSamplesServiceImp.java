package com.uway.mobile.service.impl;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.uway.mobile.common.StaticFtp;
import com.uway.mobile.domain.CommonTypeAndAtribute;
import com.uway.mobile.domain.ECity;
import com.uway.mobile.domain.Malware;
import com.uway.mobile.mapper.MalwareMapper;
import com.uway.mobile.service.MalwareSamplesService;
import com.uway.mobile.util.FTPClientHandler;
import com.uway.mobile.util.StreamConvertUtil;

@Transactional
@Service
public class MalwareSamplesServiceImp implements MalwareSamplesService {

	private static final Logger log = Logger.getLogger(MalwareSamplesServiceImp.class);

	@Autowired
	private MalwareMapper malwareMapper;

	@Override
	public void synchronizedMalwareFile() throws Exception {
		FTPFile[] listFiles = null;
		try {
			log.debug("开启ftp服务器获取目录下所有文件。");
			listFiles = FTPClientHandler.listFiles(StaticFtp.sourceFilePath);
		} catch (Exception e) {
			log.error("扫描ftp服务器目录待处理文件异常！"+e.toString());
			e.printStackTrace();
		}
		if (listFiles != null) {
			log.debug("扫描ftp服务器目录待处理文件：" + listFiles.length);
			for (FTPFile ftpFile : listFiles) {
				if (ftpFile.getName().startsWith("I_EYRJ")) {
					OutputStream outputStream = null;
					ByteArrayInputStream inputStream = null;
					try {
						log.debug("开始下载文件：" + ftpFile.getName()+ ",文件大小：" + ftpFile.getSize());
						outputStream = FTPClientHandler.downloadStream(StaticFtp.sourceFilePath, ftpFile.getName());
						log.debug("完成下载文件：" + ftpFile.getName() + ",文件大小：" + ftpFile.getSize());
						if (outputStream == null) {
							continue;
						}
						inputStream = StreamConvertUtil.parse(outputStream);
						BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
						List<Malware> list = new ArrayList<>();
						String line = "";
						log.debug("文件数据行数：" + line);
						while ((line = reader.readLine()) != null) {
							if (line.trim() != "") {
								String[] split = line.split(",");
								String phone = split[0].trim();
								String number = split[1].trim();
								String E_name = split[2].trim();
								String typ = split[3].trim();
								String attr = split[4].trim();
								String url = split[5].trim();
								String md5 = split[6].trim();
								String gtime = split[7].trim();
								String Z_name = E_name;

								Map<String, String> malwareType = CommonTypeAndAtribute.getMalwareType();
								String type = malwareType.get(typ);

								Map<String, String> malwareAtribute = CommonTypeAndAtribute.getMalwareAtribute();
								String attribute = malwareAtribute.get(attr);

								SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");
								Date gettime = null;
								if (gtime != null && gtime.length() > 6) {
									try {
										gettime = df.parse(gtime);
									} catch (ParseException e) {
										gettime = null;
									}
								} else {
									gettime = null;
								}

								Map<String, String> map = ECity.getCity();
								String city = map.get(number);
								if (StringUtils.isEmpty(city) || StringUtils.isEmpty(phone)
										|| StringUtils.isEmpty(E_name) || StringUtils.isEmpty(type)
										|| StringUtils.isEmpty(attribute) || gettime == null) {
									log.info("恶意软件信息记录 字段缺失：" + line);
								}else{
									Malware malware = new Malware(phone, "","",city,Z_name, E_name,
											0,type, attribute,"","","","", gettime,url, md5,0);
									list.add(malware);
								}
							}
						}
						if (list.size() > 0 && list != null) {
							try {
								malwareMapper.insertBath(list);
								log.debug("恶意软件信息入库记录数：" + list.size());
							} catch (Exception e) {
								log.error("恶意软件信息入库记录异常。" + e.toString());
								e.printStackTrace();
							}
						}
						String sourceFilePath = StaticFtp.sourceFilePath + ftpFile.getName();
						String destFilePath = StaticFtp.destFilePath + ftpFile.getName();

						FTPClientHandler.renameFile(sourceFilePath, destFilePath);
						log.debug("恶意软件信息迁移目录成功。");
					} catch (Exception e) {
						log.error("恶意软件操作异常。" + e.toString());
						e.printStackTrace();
					} finally {
						if (inputStream != null) {
							inputStream.close();
						}
						if (outputStream != null) {
							outputStream.close();
						}
					}
				}
			}
		}
	}
}
