package com.uway.mobile.service.impl;

import java.io.ByteArrayInputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.net.ftp.FTPFile;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.uway.mobile.common.StaticFtp;
import com.uway.mobile.domain.Vulnerability;
import com.uway.mobile.mapper.IpaddressMapper;
import com.uway.mobile.mapper.VulnerabilityMapper;
import com.uway.mobile.service.VulnerabilityService;
import com.uway.mobile.util.FTPClientHandler;
import com.uway.mobile.util.POIUtil;
import com.uway.mobile.util.StreamConvertUtil;

@Transactional
@Service
public class VulnerabilityServiceImp implements VulnerabilityService {

	private static final Logger log = Logger.getLogger(VulnerabilityServiceImp.class);

	@Autowired
	private VulnerabilityMapper vulnerabilityMapper;
	@Autowired
	private IpaddressMapper ipaddressMapper;

	@Override
	public Map<String, Object> getVulnerabilitys(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		long pageSize = Long.parseLong(paraMap.get("page_size").toString());
		List<Map<String, Object>> details = vulnerabilityMapper.getVulnerability(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			long totalNum = vulnerabilityMapper.countVulnerability(paraMap);
			resultMap.put("total_num", totalNum);
			if (totalNum % pageSize > 0) {
				resultMap.put("total_page", totalNum / pageSize + 1);
			} else {
				resultMap.put("total_page", totalNum / pageSize);
			}
		}
		return resultMap;
	}

	@Override
	public Map<String, Object> groupByParm(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = vulnerabilityMapper.groupByParm(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}
		return resultMap;
	}

	@Override
	public Map<String, Object> groupByTime(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = vulnerabilityMapper.groupByTime(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}
		return resultMap;
	}
	@Override
	public Map<String, Object> groupByDay(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = vulnerabilityMapper.groupByDay(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}
		return resultMap;
	}
	
	@Override
	public Map<String, Object> groupByWeek(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = vulnerabilityMapper.groupByWeek(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}
		return resultMap;
	}

	@Override
	public Map<String, Object> groupByRes(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = vulnerabilityMapper.groupByRes(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}
		return resultMap;
	}

	@SuppressWarnings("deprecation")
	@Override
	public void parseVulExcel() throws Exception {
		FTPFile[] listFiles = null;
		try {
			log.debug("开始扫描ftp服务器目录待处理文件");
			listFiles = FTPClientHandler.listFiles(StaticFtp.dir_vulnerability);
		} catch (Exception e) {
			log.error("扫描ftp服务器目录待处理文件异常！"+e.toString());
			e.printStackTrace();
		}
		if (listFiles != null) {
			log.debug("扫描ftp服务器目录待处理文件：" + listFiles.length);
			for (FTPFile ftpFile : listFiles) {
				if (ftpFile.getName().startsWith(StaticFtp.download_vulnerability)) {
					OutputStream outputStream = null;
					ByteArrayInputStream inputStream = null;
					try {

						outputStream = FTPClientHandler.downloadStream(StaticFtp.dir_vulnerability, ftpFile.getName());
						if (outputStream == null) {
							continue;
						}
						inputStream = StreamConvertUtil.parse(outputStream);
						Sheet sheet = POIUtil.getExcelFile(ftpFile.getName(), inputStream);
						List<Vulnerability> list = new ArrayList<Vulnerability>();
						for (Row row : sheet) {
							int rowNum = row.getRowNum();
							if (rowNum == 0) {
								continue;
							}
							String ip = row.getCell(0).getStringCellValue();
							row.getCell(1).setCellType(Cell.CELL_TYPE_STRING);
							String port = row.getCell(1).toString();
							String vulname = row.getCell(3).toString();
							row.getCell(4).setCellType(Cell.CELL_TYPE_STRING);
							String vulstat = row.getCell(4).toString();
							int vulstatus = Integer.parseInt(vulstat);

							Date firttime = null;
							if (row.getCell(5) != null) {
								firttime = row.getCell(5).getDateCellValue();
							}
							Date refreshtime = null;
							if (row.getCell(6) != null) {
								refreshtime = row.getCell(6).getDateCellValue();
							}
							Date fixtime = null;
							if (row.getCell(7) != null) {
								fixtime = row.getCell(7).getDateCellValue();
							}

							String service = null;
							if (row.getCell(2) != null) {
								service = row.getCell(2).getStringCellValue();
							}

							String department = ipaddressMapper.getCity(ip);
							if (department == null || department.length() < 2) {
								continue;
							}
							Vulnerability vulnerability = new Vulnerability(ip, port, service, vulname, vulstatus,
									firttime, refreshtime, fixtime, department,0,"");
							
							list.add(vulnerability);
						}

						if (list != null && list.size() > 0) {
							try {
								vulnerabilityMapper.insert(list);
								log.debug("漏洞信息入库记录数：" + list.size());
							} catch (Exception e) {
								log.error("漏洞信息入库记录异常。"+e.toString());
								e.printStackTrace();
							}
						}
						String sourceFilePath = StaticFtp.dir_vulnerability + ftpFile.getName();
						String destFilePath = StaticFtp.vulnerability_his + ftpFile.getName();

						FTPClientHandler.renameFile(sourceFilePath, destFilePath);
						log.debug("漏洞信息迁移目录成功。");
					} catch (Exception e) {
						log.error("漏洞信息操作异常。"+e.toString());
						e.printStackTrace();
					} finally {
						if (outputStream != null) {
							outputStream.close();
						}
						if (inputStream != null) {
							inputStream.close();
						}
					}
				}
			}
		}
	}
}
