package com.uway.mobile.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.uway.mobile.mapper.MalwareControlMapper;
import com.uway.mobile.mapper.MalwareDownloadMapper;
import com.uway.mobile.mapper.MalwareMapper;
import com.uway.mobile.service.MalwareService;

@Transactional
@Service
public class MalwareServiceImp implements MalwareService {

	@Autowired
	private MalwareMapper malwareMapper;
	@Autowired
	private MalwareControlMapper malwareControlMapper;
	@Autowired
	private MalwareDownloadMapper malwareDownloadMapper;

	public Map<String, Object> getMalwares(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		long pageSize = Long.parseLong(paraMap.get("page_size").toString());
		List<Map<String, Object>> details = malwareMapper.getMalware(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			// int totalNum = details.size();
			long totalNum = malwareMapper.countMalware(paraMap);
			resultMap.put("total_num", totalNum);
			if (totalNum % pageSize > 0) {
				resultMap.put("total_page", totalNum / pageSize + 1);
			} else {
				resultMap.put("total_page", totalNum / pageSize);
			}
		}
		return resultMap;
	}

	public long countMalware(Map<String, Object> sqlMap) {
		return malwareMapper.countMalware(sqlMap);
	}

	public Map<String, Object> groupByParm(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = malwareMapper.groupByParm(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}
		return resultMap;
	}

	public Map<String, Object> groupByTime(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = malwareMapper.groupByTime(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}
		return resultMap;
	}

	@Override
	public Map<String, Object> getByName(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = malwareMapper.getByName(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}

		return resultMap;
	}

	@Override
	public Map<String, Object> getByURL(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = malwareControlMapper.getNumberByURL(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}
		return resultMap;
	}

	@Override
	public Map<String, Object> getloadURL(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = malwareDownloadMapper.getloadURL(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}
		return resultMap;
	}

	@Override
	public Object groupByParmUnion(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		List<Map<String, Object>> details = malwareMapper.groupByParmUnion(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			resultMap.put("total_num", details.size());
		}
		return resultMap;
	}

	// 统计事件量
	@Override
	public Map<String, Object> countEventNum(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();

		List<Map<String, Object>> lDetails = malwareDownloadMapper.getloadURL(paraMap);
		//
		List<Long> list = new ArrayList<>();
		for (Map<String, Object> map : lDetails) {
			long value = (long) map.get("sum");
			if (value != 0) {
				list.add(value);
			}
		}
		List<Map<String, Object>> cDetails = malwareControlMapper.getNumberByURL(paraMap);
		for (Map<String, Object> map : cDetails) {
			long val = (long) map.get("sum");
			if (val != 0) {
				list.add(val);
			}

		}
		Long sum = (long) 0;
		for (int i = 0; i < list.size(); i++) {
			Long val = list.get(i);
			sum = sum + val;
		}
		resultMap.put("total", sum);
		return resultMap;
	}

	// 显示不良信息Control和Download详细列表
	@Override
	public Map<String, Object> getMalwareEvent(Map<String, Object> paraMap) {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		long pageSize = Long.parseLong(paraMap.get("page_size").toString());
		List<Map<String, Object>> details = malwareMapper.getMalwareEvent(paraMap);
		if (details != null) {
			resultMap.put("details", details);
			// int totalNum = details.size();
			long totalNum = malwareMapper.countMalwareEvent(paraMap);
			resultMap.put("total_num", totalNum);
			if (totalNum % pageSize > 0) {
				resultMap.put("total_page", totalNum / pageSize + 1);
			} else {
				resultMap.put("total_page", totalNum / pageSize);
			}
		}
		return resultMap;
	}

}
